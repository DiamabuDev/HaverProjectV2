@model HaverDevProject.Models.Item

@{
    ViewData["Title"] = "Create";
}
<div class="col-md-6 col-10 mx-auto">
    <h1><i class="bi bi-caret-right-fill"></i>Item</h1>
</div>
<div class="col-md-6 col-10 mx-auto">
    <partial name="_addSupplierModal" />
    <form asp-action="Create">
        <div class="card border-2">
            <div class="card-header bg-custom-color mb-2 d-flex justify-content-between">
                <div>
                    <h2 class="m-0">Create Item</h2>
                </div>
                <div class="justify-content-end">
                    <p class="m-0">Fields marked <span class="fw-bold text-danger">*</span> are required.</p>
                </div>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            </div>
            <div class="card-body col-lg-10 col-11 mx-auto">
                <div class="row">
                    <div class="form-group">
                        <label asp-for="ItemNumber" class="control-label">SAP No. <small data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="SAP No. that identifies the Item">(e.g. 207956254)</small> <span class="fw-bold text-danger">*</span></label>
                        <input asp-for="ItemNumber" class="form-control" placeholder="Code" />
                        <span asp-validation-for="ItemNumber" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="ItemName" class="control-label">Name <small data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="Item Name">(e.g. Screw 1/4" .120)</small> <span class="fw-bold text-danger">*</span></label>
                        <input asp-for="ItemName" class="form-control" placeholder="Name" />
                        <span asp-validation-for="ItemName" class="text-danger"></span>
                    </div>
                    @* <div class="form-group">
                        <label asp-for="ItemDescription" class="control-label">Description  <small data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="Description of Item"></small></label>
                        <input asp-for="ItemDescription" class="form-control" placeholder="Description" />
                        <span asp-validation-for="ItemDescription" class="text-danger"></span>
                    </div> *@

                    <div class="form-group">
                        <label asp-for="SupplierId" class="control-label">Supplier <small data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="Item Supplier">(e.g. LAWRENCE SINTERED METALS)</small> <span class="fw-bold text-danger">*</span></label>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <button class="btn btn-outline-secondary custom-btn-color" id="nowAddSupplier" data-bs-toggle="modal" data-bs-target="#addSupplierModal" type="button" data-tooltip="true"><i class='bi-plus-square-dotted'></i></button>
                            </div>   
                        <select asp-for="SupplierId" class="form-control" id="SupplierId" name="SupplierId" asp-items="ViewBag.SupplierId">
                            <option value="">Select a Supplier</option>
                        </select>
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Defects</label><small data-bs-toggle="tooltip" data-bs-placement="top" data-bs-custom-class="custom-tooltip" data-bs-title="Defects related to this Item (One or Multiple)"> (e.g. Loose wire, Bend)</small>                        
                        <div class="m-2">
                        <table>
                            <tr>
                                @{
                                    int cnt = 0;
                                    var checkboxes = ViewData["DefectOptions"] as List<HaverDevProject.ViewModels.CheckOptionVM>; 
                                    foreach (var checkbox in checkboxes)
                                    {
                                        if (cnt++ % 2 == 0)
                                        {
                                        @:</tr><tr>
                                        }
                                        @:<td>
                                            <input type="checkbox"
                                                   name="selectedOptions"
                                                   value="@checkbox.ID"
                                                   @(Html.Raw(checkbox.Assigned ? "checked=\"checked\"" : "")) />
                                            @checkbox.DisplayText @:&nbsp;&nbsp;
                                        @:</td>
                                    }
                                @:</tr>
                                }
                            </table>
                    </div>
                </div>

                </div>
            </div>
            <div class="card-footer">
                <div class="form-group d-flex justify-content-end mt-2">
                    <div>
                        <button type="button" onclick="location.href='@ViewData["returnURL"]'" class="btn btn-primary">
                            <i class="bi bi-arrow-90deg-left"></i> Back to the @ViewData["ControllerName"] List
                        </button>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary ms-4">
                            <i class='bi-plus-square-dotted'></i> Create
                        </button>
                    </div>           
                </div>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    </script>
    <script src="~/js/refreshDDL.js"></script>

    <!--Script for tooltip in Add New Supplier button-->
<script>
    $(document).ready(function () {
        $('[data-tooltip="true"]').tooltip({
            title: 'Add New Supplier'
        });
    });
</script>

<!--Script for tooltip in Add New Supplier button-->
<script type="text/javascript">
        $('#submitSupplierCreate').click(function (event) {
        event.preventDefault();
        ClearErrors();
            var form = $('#createSupplierForm');
        if (form.valid()) {
            $.ajax({
                type: "POST",
                url: form.attr('action'),
                data: form.serialize(),
                success: function () {
                    $('#addSupplierModal').modal('hide');
                },
                error: function (xhr) { //Note: xhr is the XMLHttpRequest
                    var errorMessages = [];
                    switch (xhr.status) {
                        case 401:
                            errorMessages.push("You must be logged in first.");
                            break;
                        case 403:
                            errorMessages.push("You are not authorized for this action.");
                            break;
                        default:
                            //Messages coming from the Model State Errors
                            //We split on the | delimeter and the .slice removes the last one
                            errorMessages = xhr.responseText.split("|").slice(0, -1);
                    }
                    //This checks if there are any elements with some content
                    //and if not then it provides a default feedback message.
                    if (!errorMessages.some((str) => str !== "")) {
                        errorMessages.push("Error: Unable to complete operation");
                    }
                    //Put the messages in the ErrorList ul contained in the 'ValidaitonSummary' div.
                    var ul = document.getElementById("ErrorList");
                    for (var i = 0; i < errorMessages.length; i++) {
                        var errorMessage = errorMessages[i];
                        var li = document.createElement("li");
                        li.innerHTML = errorMessage;
                        ul.appendChild(li);
                    }
                }
            });
        }
        return false;
    });
    $('#addSupplierModal').on('hide.bs.modal', function () {
            document.getElementById("createSupplierForm").reset();//to clear the data in the popup form
        ClearErrors();
            var selectedOption = $('#SupplierId').val();//Return to the current selected value
            refreshDDL('SupplierId', '/NcrQa/GetSuppliers/' + selectedOption, false, null, true, 'Select a Supplier', true);
    });
    function ClearErrors() {
        //Empty out the list of validation errors if there are any
        var ul = document.getElementById("ErrorList");
        while (ul.firstChild) {
            ul.removeChild(ul.firstChild);
        }
    }
</script>
}

